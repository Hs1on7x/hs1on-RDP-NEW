name: RDP
on:
  workflow_dispatch:
jobs:
  secure-rdp:
    runs-on: ubuntu-latest
    timeout-minutes: 3600
    steps:

      - name: Prepare Environment
        run: |
          echo "Preparing Kali Linux SSH + Tailscale environment..."

      - name: Pull and Run Kali Linux in Docker with SSH + Tailscale
        run: |
          # Pull official lightweight Kali image
          docker pull kalilinux/kali-rolling

          # Define credentials
          USERNAME="TOOLBOXLAP"
          PASSWORD="admin@123"
          AUTHKEY="${{ secrets.TAILSCALE_AUTH_KEY }}"

          # Create startup script for inside the container
          mkdir -p ./kali-env
          cat > ./kali-env/start.sh << 'EOF'
#!/bin/bash
set -e

USERNAME="${USERNAME:-TOOLBOXLAP}"
PASSWORD="${PASSWORD:-admin@123}"
AUTHKEY="${AUTHKEY}"

# Create user if doesn't exist
if ! id "$USERNAME" &>/dev/null; then
    useradd -m -s /bin/bash "$USERNAME"
fi

# Set password
echo "$USERNAME:$PASSWORD" | chpasswd
usermod -aG sudo "$USERNAME"

# Install SSH server
apt-get update
DEBIAN_FRONTEND=noninteractive apt-get install -y openssh-server

# Configure SSH
mkdir -p /var/run/sshd
sed -i 's/#PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config
sed -i 's/#PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
echo "UsePAM no" >> /etc/ssh/sshd_config

# Start SSH daemon
/usr/sbin/sshd

# Install Tailscale
curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.noarmor.gpg | tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
curl -fsSL https://pkgs.tailscale.com/stable/debian/bookworm.tailscale-keyring.list | tee /etc/apt/sources.list.d/tailscale.list
apt-get update
apt-get install -y tailscale

# Start Tailscale
tailscale up --authkey="$AUTHKEY" --hostname="gh-kali-\$(hostname)"

# Wait for IP
echo "Waiting for Tailscale IP..."
sleep 15
IP4=$(tailscale ip -4 2>/dev/null || echo "")

if [ -z "$IP4" ]; then
    echo "❌ Failed to obtain Tailscale IP" >&2
    tailscale status
    exit 1
fi

echo "✅ Tailscale IP: $IP4"
echo "✅ SSH User: $USERNAME"
echo "✅ Password: $PASSWORD"
echo "✅ Connect via: ssh $USERNAME@$IP4"

# Keep container alive
tail -f /dev/null
EOF

          chmod +x ./kali-env/start.sh

          # Launch container with host networking (required for Tailscale)
          docker run -d \
            --name kali-ssh \
            --network host \
            -e USERNAME="$USERNAME" \
            -e PASSWORD="$PASSWORD" \
            -e AUTHKEY="$AUTHKEY" \
            -v "$(pwd)/kali-env/start.sh:/start.sh" \
            --restart unless-stopped \
            kalilinux/kali-rolling \
            /bin/bash /start.sh

          echo "✅ Kali container launched."

      - name: Wait for Tailscale IP and Export
        run: |
          echo "Waiting 30 seconds for Tailscale to connect..."
          sleep 30

          IP=$(docker exec kali-ssh tailscale ip -4 2>/dev/null || echo "")
          if [ -z "$IP" ]; then
            echo "❌ Tailscale IP not assigned." >&2
            docker logs kali-ssh
            exit 1
          fi

          echo "TAILSCALE_IP=$IP" >> $GITHUB_ENV
          echo "✅ Tailscale IP obtained: $IP"

      - name: Verify SSH Port is Reachable
        run: |
          echo "Testing SSH access to $TAILSCALE_IP:22..."
          nc -zv $TAILSCALE_IP 22
          if [ $? -ne 0 ]; then
            echo "❌ SSH port 22 unreachable" >&2
            exit 1
          fi
          echo "✅ SSH connectivity confirmed!"

      - name: Display Connection Instructions
        run: |
          echo
          echo "======================================"
          echo "    🚀 KALI LINUX SSH ACCESS READY"
          echo "======================================"
          echo "🌐 Tailscale IP: $TAILSCALE_IP"
          echo "👤 Username: TOOLBOXLAP"
          echo "🔑 Password: admin@123"
          echo "🔌 Connect via: ssh TOOLBOXLAP@$TAILSCALE_IP"
          echo "⏱️  This session will stay alive for up to 6 hours."
          echo "🛑 To stop: Cancel this workflow manually."
          echo "======================================"
          echo

      - name: Keep Workflow Alive (Persistent Session)
        run: |
          while true; do
            echo "[$(date)] ✅ SSH Session Active — Workflow will not exit until timeout or manual cancel."
            sleep 300
          done
